/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Operation', null, global);
goog.exportSymbol('proto.Operation.Deletion', null, global);
goog.exportSymbol('proto.Operation.Insertion', null, global);
goog.exportSymbol('proto.Operation.Undo', null, global);
goog.exportSymbol('proto.OperationId', null, global);
goog.exportSymbol('proto.Point', null, global);
goog.exportSymbol('proto.RemotePosition', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Operation.oneofGroups_);
};
goog.inherits(proto.Operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Operation.displayName = 'proto.Operation';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Operation.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.Operation.KindCase = {
  KIND_NOT_SET: 0,
  INSERTION: 1,
  DELETION: 2,
  UNDO: 3
};

/**
 * @return {proto.Operation.KindCase}
 */
proto.Operation.prototype.getKindCase = function() {
  return /** @type {proto.Operation.KindCase} */(jspb.Message.computeOneofCase(this, proto.Operation.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Operation.prototype.toObject = function(opt_includeInstance) {
  return proto.Operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Operation} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    insertion: (f = msg.getInsertion()) && proto.Operation.Insertion.toObject(includeInstance, f),
    deletion: (f = msg.getDeletion()) && proto.Operation.Deletion.toObject(includeInstance, f),
    undo: (f = msg.getUndo()) && proto.Operation.Undo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Operation}
 */
proto.Operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Operation;
  return proto.Operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Operation}
 */
proto.Operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Operation.Insertion;
      reader.readMessage(value,proto.Operation.Insertion.deserializeBinaryFromReader);
      msg.setInsertion(value);
      break;
    case 2:
      var value = new proto.Operation.Deletion;
      reader.readMessage(value,proto.Operation.Deletion.deserializeBinaryFromReader);
      msg.setDeletion(value);
      break;
    case 3:
      var value = new proto.Operation.Undo;
      reader.readMessage(value,proto.Operation.Undo.deserializeBinaryFromReader);
      msg.setUndo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Operation} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInsertion();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Operation.Insertion.serializeBinaryToWriter
    );
  }
  f = message.getDeletion();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Operation.Deletion.serializeBinaryToWriter
    );
  }
  f = message.getUndo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Operation.Undo.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Operation.Insertion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Operation.Insertion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Operation.Insertion.displayName = 'proto.Operation.Insertion';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Operation.Insertion.prototype.toObject = function(opt_includeInstance) {
  return proto.Operation.Insertion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Operation.Insertion} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Operation.Insertion.toObject = function(includeInstance, msg) {
  var f, obj = {
    opId: (f = msg.getOpId()) && proto.OperationId.toObject(includeInstance, f),
    text: jspb.Message.getFieldWithDefault(msg, 2, ""),
    leftDependencyId: (f = msg.getLeftDependencyId()) && proto.OperationId.toObject(includeInstance, f),
    offsetInLeftDependency: (f = msg.getOffsetInLeftDependency()) && proto.Point.toObject(includeInstance, f),
    rightDependencyId: (f = msg.getRightDependencyId()) && proto.OperationId.toObject(includeInstance, f),
    offsetInRightDependency: (f = msg.getOffsetInRightDependency()) && proto.Point.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Operation.Insertion}
 */
proto.Operation.Insertion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Operation.Insertion;
  return proto.Operation.Insertion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Operation.Insertion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Operation.Insertion}
 */
proto.Operation.Insertion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.OperationId;
      reader.readMessage(value,proto.OperationId.deserializeBinaryFromReader);
      msg.setOpId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 3:
      var value = new proto.OperationId;
      reader.readMessage(value,proto.OperationId.deserializeBinaryFromReader);
      msg.setLeftDependencyId(value);
      break;
    case 4:
      var value = new proto.Point;
      reader.readMessage(value,proto.Point.deserializeBinaryFromReader);
      msg.setOffsetInLeftDependency(value);
      break;
    case 5:
      var value = new proto.OperationId;
      reader.readMessage(value,proto.OperationId.deserializeBinaryFromReader);
      msg.setRightDependencyId(value);
      break;
    case 6:
      var value = new proto.Point;
      reader.readMessage(value,proto.Point.deserializeBinaryFromReader);
      msg.setOffsetInRightDependency(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Operation.Insertion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Operation.Insertion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Operation.Insertion} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Operation.Insertion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOpId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.OperationId.serializeBinaryToWriter
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLeftDependencyId();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.OperationId.serializeBinaryToWriter
    );
  }
  f = message.getOffsetInLeftDependency();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Point.serializeBinaryToWriter
    );
  }
  f = message.getRightDependencyId();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.OperationId.serializeBinaryToWriter
    );
  }
  f = message.getOffsetInRightDependency();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.Point.serializeBinaryToWriter
    );
  }
};


/**
 * optional OperationId op_id = 1;
 * @return {?proto.OperationId}
 */
proto.Operation.Insertion.prototype.getOpId = function() {
  return /** @type{?proto.OperationId} */ (
    jspb.Message.getWrapperField(this, proto.OperationId, 1));
};


/** @param {?proto.OperationId|undefined} value */
proto.Operation.Insertion.prototype.setOpId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.Operation.Insertion.prototype.clearOpId = function() {
  this.setOpId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Operation.Insertion.prototype.hasOpId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string text = 2;
 * @return {string}
 */
proto.Operation.Insertion.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Operation.Insertion.prototype.setText = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional OperationId left_dependency_id = 3;
 * @return {?proto.OperationId}
 */
proto.Operation.Insertion.prototype.getLeftDependencyId = function() {
  return /** @type{?proto.OperationId} */ (
    jspb.Message.getWrapperField(this, proto.OperationId, 3));
};


/** @param {?proto.OperationId|undefined} value */
proto.Operation.Insertion.prototype.setLeftDependencyId = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.Operation.Insertion.prototype.clearLeftDependencyId = function() {
  this.setLeftDependencyId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Operation.Insertion.prototype.hasLeftDependencyId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Point offset_in_left_dependency = 4;
 * @return {?proto.Point}
 */
proto.Operation.Insertion.prototype.getOffsetInLeftDependency = function() {
  return /** @type{?proto.Point} */ (
    jspb.Message.getWrapperField(this, proto.Point, 4));
};


/** @param {?proto.Point|undefined} value */
proto.Operation.Insertion.prototype.setOffsetInLeftDependency = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.Operation.Insertion.prototype.clearOffsetInLeftDependency = function() {
  this.setOffsetInLeftDependency(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Operation.Insertion.prototype.hasOffsetInLeftDependency = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional OperationId right_dependency_id = 5;
 * @return {?proto.OperationId}
 */
proto.Operation.Insertion.prototype.getRightDependencyId = function() {
  return /** @type{?proto.OperationId} */ (
    jspb.Message.getWrapperField(this, proto.OperationId, 5));
};


/** @param {?proto.OperationId|undefined} value */
proto.Operation.Insertion.prototype.setRightDependencyId = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.Operation.Insertion.prototype.clearRightDependencyId = function() {
  this.setRightDependencyId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Operation.Insertion.prototype.hasRightDependencyId = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Point offset_in_right_dependency = 6;
 * @return {?proto.Point}
 */
proto.Operation.Insertion.prototype.getOffsetInRightDependency = function() {
  return /** @type{?proto.Point} */ (
    jspb.Message.getWrapperField(this, proto.Point, 6));
};


/** @param {?proto.Point|undefined} value */
proto.Operation.Insertion.prototype.setOffsetInRightDependency = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.Operation.Insertion.prototype.clearOffsetInRightDependency = function() {
  this.setOffsetInRightDependency(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Operation.Insertion.prototype.hasOffsetInRightDependency = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Operation.Deletion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Operation.Deletion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Operation.Deletion.displayName = 'proto.Operation.Deletion';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Operation.Deletion.prototype.toObject = function(opt_includeInstance) {
  return proto.Operation.Deletion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Operation.Deletion} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Operation.Deletion.toObject = function(includeInstance, msg) {
  var f, obj = {
    opId: (f = msg.getOpId()) && proto.OperationId.toObject(includeInstance, f),
    leftDependencyId: (f = msg.getLeftDependencyId()) && proto.OperationId.toObject(includeInstance, f),
    offsetInLeftDependency: (f = msg.getOffsetInLeftDependency()) && proto.Point.toObject(includeInstance, f),
    rightDependencyId: (f = msg.getRightDependencyId()) && proto.OperationId.toObject(includeInstance, f),
    offsetInRightDependency: (f = msg.getOffsetInRightDependency()) && proto.Point.toObject(includeInstance, f),
    maxSeqsBySiteMap: (f = msg.getMaxSeqsBySiteMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Operation.Deletion}
 */
proto.Operation.Deletion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Operation.Deletion;
  return proto.Operation.Deletion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Operation.Deletion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Operation.Deletion}
 */
proto.Operation.Deletion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.OperationId;
      reader.readMessage(value,proto.OperationId.deserializeBinaryFromReader);
      msg.setOpId(value);
      break;
    case 2:
      var value = new proto.OperationId;
      reader.readMessage(value,proto.OperationId.deserializeBinaryFromReader);
      msg.setLeftDependencyId(value);
      break;
    case 3:
      var value = new proto.Point;
      reader.readMessage(value,proto.Point.deserializeBinaryFromReader);
      msg.setOffsetInLeftDependency(value);
      break;
    case 4:
      var value = new proto.OperationId;
      reader.readMessage(value,proto.OperationId.deserializeBinaryFromReader);
      msg.setRightDependencyId(value);
      break;
    case 5:
      var value = new proto.Point;
      reader.readMessage(value,proto.Point.deserializeBinaryFromReader);
      msg.setOffsetInRightDependency(value);
      break;
    case 6:
      var value = msg.getMaxSeqsBySiteMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readUint32);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Operation.Deletion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Operation.Deletion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Operation.Deletion} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Operation.Deletion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOpId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.OperationId.serializeBinaryToWriter
    );
  }
  f = message.getLeftDependencyId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.OperationId.serializeBinaryToWriter
    );
  }
  f = message.getOffsetInLeftDependency();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Point.serializeBinaryToWriter
    );
  }
  f = message.getRightDependencyId();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.OperationId.serializeBinaryToWriter
    );
  }
  f = message.getOffsetInRightDependency();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.Point.serializeBinaryToWriter
    );
  }
  f = message.getMaxSeqsBySiteMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeUint32);
  }
};


/**
 * optional OperationId op_id = 1;
 * @return {?proto.OperationId}
 */
proto.Operation.Deletion.prototype.getOpId = function() {
  return /** @type{?proto.OperationId} */ (
    jspb.Message.getWrapperField(this, proto.OperationId, 1));
};


/** @param {?proto.OperationId|undefined} value */
proto.Operation.Deletion.prototype.setOpId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.Operation.Deletion.prototype.clearOpId = function() {
  this.setOpId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Operation.Deletion.prototype.hasOpId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional OperationId left_dependency_id = 2;
 * @return {?proto.OperationId}
 */
proto.Operation.Deletion.prototype.getLeftDependencyId = function() {
  return /** @type{?proto.OperationId} */ (
    jspb.Message.getWrapperField(this, proto.OperationId, 2));
};


/** @param {?proto.OperationId|undefined} value */
proto.Operation.Deletion.prototype.setLeftDependencyId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.Operation.Deletion.prototype.clearLeftDependencyId = function() {
  this.setLeftDependencyId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Operation.Deletion.prototype.hasLeftDependencyId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Point offset_in_left_dependency = 3;
 * @return {?proto.Point}
 */
proto.Operation.Deletion.prototype.getOffsetInLeftDependency = function() {
  return /** @type{?proto.Point} */ (
    jspb.Message.getWrapperField(this, proto.Point, 3));
};


/** @param {?proto.Point|undefined} value */
proto.Operation.Deletion.prototype.setOffsetInLeftDependency = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.Operation.Deletion.prototype.clearOffsetInLeftDependency = function() {
  this.setOffsetInLeftDependency(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Operation.Deletion.prototype.hasOffsetInLeftDependency = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional OperationId right_dependency_id = 4;
 * @return {?proto.OperationId}
 */
proto.Operation.Deletion.prototype.getRightDependencyId = function() {
  return /** @type{?proto.OperationId} */ (
    jspb.Message.getWrapperField(this, proto.OperationId, 4));
};


/** @param {?proto.OperationId|undefined} value */
proto.Operation.Deletion.prototype.setRightDependencyId = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.Operation.Deletion.prototype.clearRightDependencyId = function() {
  this.setRightDependencyId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Operation.Deletion.prototype.hasRightDependencyId = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Point offset_in_right_dependency = 5;
 * @return {?proto.Point}
 */
proto.Operation.Deletion.prototype.getOffsetInRightDependency = function() {
  return /** @type{?proto.Point} */ (
    jspb.Message.getWrapperField(this, proto.Point, 5));
};


/** @param {?proto.Point|undefined} value */
proto.Operation.Deletion.prototype.setOffsetInRightDependency = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.Operation.Deletion.prototype.clearOffsetInRightDependency = function() {
  this.setOffsetInRightDependency(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Operation.Deletion.prototype.hasOffsetInRightDependency = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * map<uint32, uint32> max_seqs_by_site = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.Operation.Deletion.prototype.getMaxSeqsBySiteMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      null));
};


proto.Operation.Deletion.prototype.clearMaxSeqsBySiteMap = function() {
  this.getMaxSeqsBySiteMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Operation.Undo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Operation.Undo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Operation.Undo.displayName = 'proto.Operation.Undo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Operation.Undo.prototype.toObject = function(opt_includeInstance) {
  return proto.Operation.Undo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Operation.Undo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Operation.Undo.toObject = function(includeInstance, msg) {
  var f, obj = {
    opId: (f = msg.getOpId()) && proto.OperationId.toObject(includeInstance, f),
    undoCount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Operation.Undo}
 */
proto.Operation.Undo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Operation.Undo;
  return proto.Operation.Undo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Operation.Undo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Operation.Undo}
 */
proto.Operation.Undo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.OperationId;
      reader.readMessage(value,proto.OperationId.deserializeBinaryFromReader);
      msg.setOpId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUndoCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Operation.Undo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Operation.Undo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Operation.Undo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Operation.Undo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOpId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.OperationId.serializeBinaryToWriter
    );
  }
  f = message.getUndoCount();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional OperationId op_id = 1;
 * @return {?proto.OperationId}
 */
proto.Operation.Undo.prototype.getOpId = function() {
  return /** @type{?proto.OperationId} */ (
    jspb.Message.getWrapperField(this, proto.OperationId, 1));
};


/** @param {?proto.OperationId|undefined} value */
proto.Operation.Undo.prototype.setOpId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.Operation.Undo.prototype.clearOpId = function() {
  this.setOpId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Operation.Undo.prototype.hasOpId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 undo_count = 2;
 * @return {number}
 */
proto.Operation.Undo.prototype.getUndoCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Operation.Undo.prototype.setUndoCount = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional Insertion insertion = 1;
 * @return {?proto.Operation.Insertion}
 */
proto.Operation.prototype.getInsertion = function() {
  return /** @type{?proto.Operation.Insertion} */ (
    jspb.Message.getWrapperField(this, proto.Operation.Insertion, 1));
};


/** @param {?proto.Operation.Insertion|undefined} value */
proto.Operation.prototype.setInsertion = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.Operation.oneofGroups_[0], value);
};


proto.Operation.prototype.clearInsertion = function() {
  this.setInsertion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Operation.prototype.hasInsertion = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Deletion deletion = 2;
 * @return {?proto.Operation.Deletion}
 */
proto.Operation.prototype.getDeletion = function() {
  return /** @type{?proto.Operation.Deletion} */ (
    jspb.Message.getWrapperField(this, proto.Operation.Deletion, 2));
};


/** @param {?proto.Operation.Deletion|undefined} value */
proto.Operation.prototype.setDeletion = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.Operation.oneofGroups_[0], value);
};


proto.Operation.prototype.clearDeletion = function() {
  this.setDeletion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Operation.prototype.hasDeletion = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Undo undo = 3;
 * @return {?proto.Operation.Undo}
 */
proto.Operation.prototype.getUndo = function() {
  return /** @type{?proto.Operation.Undo} */ (
    jspb.Message.getWrapperField(this, proto.Operation.Undo, 3));
};


/** @param {?proto.Operation.Undo|undefined} value */
proto.Operation.prototype.setUndo = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.Operation.oneofGroups_[0], value);
};


proto.Operation.prototype.clearUndo = function() {
  this.setUndo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Operation.prototype.hasUndo = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RemotePosition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RemotePosition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RemotePosition.displayName = 'proto.RemotePosition';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RemotePosition.prototype.toObject = function(opt_includeInstance) {
  return proto.RemotePosition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RemotePosition} msg The msg instance to transform.
 * @return {!Object}
 */
proto.RemotePosition.toObject = function(includeInstance, msg) {
  var f, obj = {
    siteId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    leftDependencyId: (f = msg.getLeftDependencyId()) && proto.OperationId.toObject(includeInstance, f),
    offsetInLeftDependency: (f = msg.getOffsetInLeftDependency()) && proto.Point.toObject(includeInstance, f),
    rightDependencyId: (f = msg.getRightDependencyId()) && proto.OperationId.toObject(includeInstance, f),
    offsetInRightDependency: (f = msg.getOffsetInRightDependency()) && proto.Point.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RemotePosition}
 */
proto.RemotePosition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RemotePosition;
  return proto.RemotePosition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RemotePosition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RemotePosition}
 */
proto.RemotePosition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSiteId(value);
      break;
    case 2:
      var value = new proto.OperationId;
      reader.readMessage(value,proto.OperationId.deserializeBinaryFromReader);
      msg.setLeftDependencyId(value);
      break;
    case 3:
      var value = new proto.Point;
      reader.readMessage(value,proto.Point.deserializeBinaryFromReader);
      msg.setOffsetInLeftDependency(value);
      break;
    case 4:
      var value = new proto.OperationId;
      reader.readMessage(value,proto.OperationId.deserializeBinaryFromReader);
      msg.setRightDependencyId(value);
      break;
    case 5:
      var value = new proto.Point;
      reader.readMessage(value,proto.Point.deserializeBinaryFromReader);
      msg.setOffsetInRightDependency(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RemotePosition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RemotePosition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RemotePosition} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.RemotePosition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSiteId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getLeftDependencyId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.OperationId.serializeBinaryToWriter
    );
  }
  f = message.getOffsetInLeftDependency();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Point.serializeBinaryToWriter
    );
  }
  f = message.getRightDependencyId();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.OperationId.serializeBinaryToWriter
    );
  }
  f = message.getOffsetInRightDependency();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.Point.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 site_id = 1;
 * @return {number}
 */
proto.RemotePosition.prototype.getSiteId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.RemotePosition.prototype.setSiteId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional OperationId left_dependency_id = 2;
 * @return {?proto.OperationId}
 */
proto.RemotePosition.prototype.getLeftDependencyId = function() {
  return /** @type{?proto.OperationId} */ (
    jspb.Message.getWrapperField(this, proto.OperationId, 2));
};


/** @param {?proto.OperationId|undefined} value */
proto.RemotePosition.prototype.setLeftDependencyId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.RemotePosition.prototype.clearLeftDependencyId = function() {
  this.setLeftDependencyId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RemotePosition.prototype.hasLeftDependencyId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Point offset_in_left_dependency = 3;
 * @return {?proto.Point}
 */
proto.RemotePosition.prototype.getOffsetInLeftDependency = function() {
  return /** @type{?proto.Point} */ (
    jspb.Message.getWrapperField(this, proto.Point, 3));
};


/** @param {?proto.Point|undefined} value */
proto.RemotePosition.prototype.setOffsetInLeftDependency = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.RemotePosition.prototype.clearOffsetInLeftDependency = function() {
  this.setOffsetInLeftDependency(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RemotePosition.prototype.hasOffsetInLeftDependency = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional OperationId right_dependency_id = 4;
 * @return {?proto.OperationId}
 */
proto.RemotePosition.prototype.getRightDependencyId = function() {
  return /** @type{?proto.OperationId} */ (
    jspb.Message.getWrapperField(this, proto.OperationId, 4));
};


/** @param {?proto.OperationId|undefined} value */
proto.RemotePosition.prototype.setRightDependencyId = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.RemotePosition.prototype.clearRightDependencyId = function() {
  this.setRightDependencyId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RemotePosition.prototype.hasRightDependencyId = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Point offset_in_right_dependency = 5;
 * @return {?proto.Point}
 */
proto.RemotePosition.prototype.getOffsetInRightDependency = function() {
  return /** @type{?proto.Point} */ (
    jspb.Message.getWrapperField(this, proto.Point, 5));
};


/** @param {?proto.Point|undefined} value */
proto.RemotePosition.prototype.setOffsetInRightDependency = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.RemotePosition.prototype.clearOffsetInRightDependency = function() {
  this.setOffsetInRightDependency(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RemotePosition.prototype.hasOffsetInRightDependency = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OperationId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OperationId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.OperationId.displayName = 'proto.OperationId';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OperationId.prototype.toObject = function(opt_includeInstance) {
  return proto.OperationId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OperationId} msg The msg instance to transform.
 * @return {!Object}
 */
proto.OperationId.toObject = function(includeInstance, msg) {
  var f, obj = {
    site: jspb.Message.getFieldWithDefault(msg, 1, 0),
    seq: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OperationId}
 */
proto.OperationId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OperationId;
  return proto.OperationId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OperationId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OperationId}
 */
proto.OperationId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSite(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSeq(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OperationId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OperationId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OperationId} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.OperationId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSite();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getSeq();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 site = 1;
 * @return {number}
 */
proto.OperationId.prototype.getSite = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.OperationId.prototype.setSite = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 seq = 2;
 * @return {number}
 */
proto.OperationId.prototype.getSeq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.OperationId.prototype.setSeq = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Point = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Point, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Point.displayName = 'proto.Point';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Point.prototype.toObject = function(opt_includeInstance) {
  return proto.Point.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Point} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Point.toObject = function(includeInstance, msg) {
  var f, obj = {
    row: jspb.Message.getFieldWithDefault(msg, 1, 0),
    column: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Point}
 */
proto.Point.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Point;
  return proto.Point.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Point} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Point}
 */
proto.Point.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRow(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setColumn(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Point.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Point.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Point} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Point.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRow();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getColumn();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 row = 1;
 * @return {number}
 */
proto.Point.prototype.getRow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Point.prototype.setRow = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 column = 2;
 * @return {number}
 */
proto.Point.prototype.getColumn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Point.prototype.setColumn = function(value) {
  jspb.Message.setField(this, 2, value);
};


goog.object.extend(exports, proto);
